version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1

references:

base_image: &base_image
  youngwoochun/custom-docker-images:terraform_image

working_directory: &working_directory
  ~/Project-1

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory

repo_cache_key: &repo_cache_key v1-repo-{{ .Branch }}-{{ .Revision }}

restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      cd product-a
      terraform init

environment: &environment
  parameters:
    config:
      type: env_var_name
      default: CONFIG
    region:
      type: env_var_name
      default: REGION

jobs:
  plan:
    <<: *default_config
    <<: *environment
    steps:
      - checkout
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            cd product-a
            terraform plan -input=false -var-file=./config/${<< parameters.region >>}.tfvars -var-file=./config/common.tfvars -var-file=./config/${<< parameters.config >>}.tfvars
      - *save_repo


  apply:
    <<: *default_config
    <<: *environment
    steps:
      - *restore_repo
      - run:
          command: |
            cd product-a
            terraform apply --auto-approve -var-file=./config/${<< parameters.region >>}.tfvars -var-file=./config/common.tfvars -var-file=./config/${<< parameters.config >>}.tfvars

  destroy:
    <<: *default_config
    <<: *environment
    steps:
      - *restore_repo
      - run:
          name: terraform destroy
          command: |
            cd product-a
            terraform destroy --auto-approve -var-file=./config/${<< parameters.region >>}.tfvars -var-file=./config/common.tfvars -var-file=./config/${<< parameters.config >>}.tfvars

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: tests/nginx-deployment/deployment.yaml
          resource-name: deployment/nginx-deployment

workflows:
  version: 2
  aws_terraform_deploy:
    jobs:
      - plan
      - hold-apply:
          type: approval
          requires:
            - plan
      - apply:
          requires:
            - hold-apply
      - hold-destroy:
          type: approval
          requires:
            - apply
      - create-deployment:
          cluster-name: main_eks
      - aws-eks/update-container-image:
          cluster-name: main_eks
          container-image-updates: 'nginx=nginx:1.9.1'
          post-steps:
            - kubernetes/delete-resource:
                resource-names: nginx-deployment
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
          resource-name: deployment/nginx-deployment
      - aws-eks/delete-cluster:
          cluster-name: main_eks
          requires:
            - aws-eks/update-container-image
      - destroy:
          requires:
            - hold-destroy
          filters:
            branches:
              ignore:
                - develop
                - /feature-.*/
